{"pageProps":{"rule":{"metadata":{"creation_date":"2023/06/26","integration":["endpoint"],"maturity":"production","min_stack_comments":"The linux.advanced.capture_env_vars option for Elastic Defend has been introduced in 8.6.0","min_stack_version":"8.6.0","updated_date":"2023/08/25"},"rule":{"author":["Elastic"],"description":"This rule detects the execution of a process where the LD_PRELOAD environment variable is set. LD_PRELOAD can be used to\ninject a shared library into a binary at or prior to execution. A threat actor may do this in order to load a malicious\nshared library for the purposes of persistence, privilege escalation, and defense evasion. This activity is not common\nand will potentially indicate malicious or suspicious behavior.\n","from":"now-9m","index":["logs-endpoint.events.*"],"language":"eql","license":"Elastic License v2","name":"Deprecated - Potential Process Injection via LD_PRELOAD Environment Variable","note":" This rule was deprecated due to the large amount of false positives and the lack of true positives generated by the rule.\n## Setup\nBy default, the `Elastic Defend` integration does not collect environment variable logging. In order to capture this behavior, this rule requires a specific configuration option set within the advanced settings of the `Elastic Defend` integration. \n```\nKibana -->\nFleet -->\nAgent policies -->\nAgent policy for which the option should be enabled -->\nName of the Elastic Defend integration --> \nShow advanced settings -->\nlinux.advanced.capture_env_vars\n```\n`linux.advanced.capture_env_vars` should be set to `LD_PRELOAD,LD_LIBRARY_PATH`. \nAfter saving the integration change, the Elastic Agents running this policy will be updated and the rule will function properly.\n","references":["https://www.getambassador.io/resources/code-injection-on-linux-and-macos"],"risk_score":21,"rule_id":"4973e46b-a663-41b8-a875-ced16dda2bb0","severity":"low","tags":["Domain: Endpoint","OS: Linux","Use Case: Threat Detection","Tactic: Defense Evasion","Tactic: Persistence","Tactic: Privilege Escalation"],"timestamp_override":"event.ingested","type":"eql","query":"process where host.os.type == \"linux\" and event.action == \"exec\" and process.env_vars : (\"LD_PRELOAD=?*\", \"LD_LIBRARY_PATH=?*\")\n","threat":[{"framework":"MITRE ATT&CK","technique":[{"id":"T1574","name":"Hijack Execution Flow","reference":"https://attack.mitre.org/techniques/T1574/","subtechnique":[{"id":"T1574.006","name":"Dynamic Linker Hijacking","reference":"https://attack.mitre.org/techniques/T1574/006/"}]}],"tactic":{"id":"TA0005","name":"Defense Evasion","reference":"https://attack.mitre.org/tactics/TA0005/"}},{"framework":"MITRE ATT&CK","technique":[{"id":"T1574","name":"Hijack Execution Flow","reference":"https://attack.mitre.org/techniques/T1574/","subtechnique":[{"id":"T1574.006","name":"Dynamic Linker Hijacking","reference":"https://attack.mitre.org/techniques/T1574/006/"}]}],"tactic":{"id":"TA0003","name":"Persistence","reference":"https://attack.mitre.org/tactics/TA0003/"}},{"framework":"MITRE ATT&CK","technique":[{"id":"T1574","name":"Hijack Execution Flow","reference":"https://attack.mitre.org/techniques/T1574/","subtechnique":[{"id":"T1574.006","name":"Dynamic Linker Hijacking","reference":"https://attack.mitre.org/techniques/T1574/006/"}]}],"tactic":{"id":"TA0004","name":"Privilege Escalation","reference":"https://attack.mitre.org/tactics/TA0004/"}}]}}},"__N_SSG":true}