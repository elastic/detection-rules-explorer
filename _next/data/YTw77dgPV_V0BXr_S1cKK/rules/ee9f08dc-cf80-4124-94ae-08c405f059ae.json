{"pageProps":{"rule":{"metadata":{"creation_date":"2021/01/13","integration":["endpoint"],"maturity":"development","updated_date":"2023/06/22"},"rule":{"author":["Elastic"],"description":"Identifies when a Python script is executed using command line input and imports the sys module. Attackers often use\nthis method to execute malicious scripts and avoiding writing it to disk.\n","false_positives":["Legitimate Python scripting activity."],"from":"now-9m","index":["auditbeat-*","logs-endpoint.events.*"],"language":"eql","license":"Elastic License v2","name":"Python Script Execution via Command Line","note":"## Setup\n\nIf enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2, events will not define `event.ingested` and default fallback for EQL rules was not added until 8.2, so you will need to add a custom pipeline to populate `event.ingested` to @timestamp for this rule to work.\n","risk_score":47,"rule_id":"ee9f08dc-cf80-4124-94ae-08c405f059ae","severity":"medium","tags":["Domain: Endpoint","OS: Linux","OS: macOS","OS: Windows","Use Case: Threat Detection","Tactic: Execution"],"timestamp_override":"event.ingested","type":"eql","query":"process where event.type in (\"start\", \"process_started\") and\n process.name : \"python*\" and process.args : \"-c\" and process.args : \"*import*sys*\"\n","threat":[{"framework":"MITRE ATT&CK","technique":[{"id":"T1059","name":"Command and Scripting Interpreter","reference":"https://attack.mitre.org/techniques/T1059/","subtechnique":[{"id":"T1059.006","name":"Python","reference":"https://attack.mitre.org/techniques/T1059/006/"},{"id":"T1059.003","name":"Windows Command Shell","reference":"https://attack.mitre.org/techniques/T1059/003/"}]}],"tactic":{"id":"TA0002","name":"Execution","reference":"https://attack.mitre.org/tactics/TA0002/"}}]}}},"__N_SSG":true}