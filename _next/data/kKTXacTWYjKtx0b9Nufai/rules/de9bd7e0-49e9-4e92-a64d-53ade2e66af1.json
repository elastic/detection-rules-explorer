{"pageProps":{"rule":{"metadata":{"creation_date":"2020/08/19","integration":["endpoint","windows"],"maturity":"production","min_stack_comments":"New fields added: required_fields, related_integrations, setup","min_stack_version":"8.3.0","updated_date":"2023/12/21"},"rule":{"author":["Elastic"],"description":"Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection.","from":"now-9m","index":["winlogbeat-*","logs-endpoint.events.*","logs-windows.*","endgame-*"],"language":"eql","license":"Elastic License v2","name":"Unusual Child Process from a System Virtual Process","risk_score":73,"rule_id":"de9bd7e0-49e9-4e92-a64d-53ade2e66af1","setup":"## Setup\n\nIf enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,\nevents will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.\nHence for this rule to work effectively, users will need to add a custom ingest pipeline to populate\n`event.ingested` to @timestamp.\nFor more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html\n","severity":"high","tags":["Domain: Endpoint","OS: Windows","Use Case: Threat Detection","Tactic: Defense Evasion","Data Source: Elastic Endgame","Data Source: Elastic Defend"],"timestamp_override":"event.ingested","type":"eql","query":"process where host.os.type == \"windows\" and event.type == \"start\" and\n  process.parent.pid == 4 and process.executable : \"?*\" and\n  not process.executable : (\"Registry\", \"MemCompression\", \"?:\\\\Windows\\\\System32\\\\smss.exe\")\n","threat":[{"framework":"MITRE ATT&CK","technique":[{"id":"T1055","name":"Process Injection","reference":"https://attack.mitre.org/techniques/T1055/"}],"tactic":{"id":"TA0005","name":"Defense Evasion","reference":"https://attack.mitre.org/tactics/TA0005/"}}]}}},"__N_SSG":true}