{"pageProps":{"rule":{"metadata":{"creation_date":"2024/03/13","integration":["auditd_manager"],"maturity":"production","updated_date":"2024/09/23"},"rule":{"author":["Elastic"],"description":"Monitors for the execution of a previously unknown unix binary with read, write and execute memory region permissions.\nThe mprotect() system call is used to change the access protections on a region of memory that has already been\nallocated. This syscall allows a process to modify the permissions of pages in its virtual address space, enabling or\ndisabling permissions such as read, write, and execute for those pages. RWX permissions on memory is in many cases\noverly permissive, and should be analyzed thoroughly.\n","from":"now-9m","index":["auditbeat-*","logs-auditd_manager.auditd-*"],"language":"kuery","license":"Elastic License v2","name":"Unknown Execution of Binary with RWX Memory Region","references":["https://man7.org/linux/man-pages/man2/mprotect.2.html","https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd"],"risk_score":47,"rule_id":"23bcd283-2bc0-4db2-81d4-273fc051e5c0","setup":"## Setup\n\nThis rule requires the use of the `auditd_manager` integration. `Auditd_manager` is a tool designed to simplify and enhance the management of the audit subsystem in Linux systems. It provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system. The following steps should be executed in order to install and deploy `auditd_manager` on a Linux system.\n```\nKibana -->\nManagement -->\nIntegrations -->\nAuditd Manager -->\nAdd Auditd Manager\n```\n`Auditd_manager` subscribes to the kernel and receives events as they occur without any additional configuration. However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the \"audit rules\" configuration box or the \"auditd rule files\" box by specifying a file to read the audit rules from.\nFor this detection rule to trigger, the following additional audit rules are required to be added to the integration:\n```\n-a always,exit -F arch=b64 -S mprotect\n```\nAdd the newly installed `auditd manager` to an agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.\n","severity":"medium","tags":["Domain: Endpoint","OS: Linux","Use Case: Threat Detection","Tactic: Execution","Data Source: Auditd Manager"],"timestamp_override":"event.ingested","type":"new_terms","query":"event.category:process and host.os.type:linux and auditd.data.syscall:mprotect and auditd.data.a2:7 and not (\n  process.executable:(\n    \"/usr/share/kibana/node/bin/node\" or \"/usr/share/elasticsearch/jdk/bin/java\" or \"/usr/sbin/apache2\"\n  ) or\n  process.name:httpd\n)\n","threat":[{"framework":"MITRE ATT&CK","technique":[{"id":"T1059","name":"Command and Scripting Interpreter","reference":"https://attack.mitre.org/techniques/T1059/","subtechnique":[{"id":"T1059.004","name":"Unix Shell","reference":"https://attack.mitre.org/techniques/T1059/004/"}]}],"tactic":{"id":"TA0002","name":"Execution","reference":"https://attack.mitre.org/tactics/TA0002/"}}],"new_terms":{"field":"new_terms_fields","value":["process.executable"],"history_window_start":[{"field":"history_window_start","value":"now-7d"}]}}}},"__N_SSG":true}